openapi: 3.0.3
info:
  title: Organization Access API
  description: |
    A comprehensive multi-tenant Course Management System API with JWT authentication.
    
    ## Features
    - Multi-tenant organization isolation
    - Brand-level access control
    - JWT-based authentication
    - Course CRUD operations
    - User management
    - API key authentication for external access
    
    ## Authentication
    This API supports two authentication methods:
    1. **JWT Authentication** - For user operations (register, login, profile management)
    2. **API Key Authentication** - For course access and organization data
    
    ## Multi-tenancy
    All operations are scoped to the authenticated user's organization, ensuring complete data isolation between different organizations.
    
  version: 2.0.0
  contact:
    name: API Support
    email: support@org-access-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.org-access.com/api
    description: Production server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - organizationId
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                firstName:
                  type: string
                  maxLength: 50
                  example: "John"
                lastName:
                  type: string
                  maxLength: 50
                  example: "Doe"
                phone:
                  type: string
                  pattern: '^[\+]?[1-9][\d]{0,15}$'
                  example: "+1234567890"
                organizationId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Get authenticated user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

  # User Management Endpoints
  /users/profile:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Get current user's detailed profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "John Doe"
                firstName:
                  type: string
                  maxLength: 50
                  example: "John"
                lastName:
                  type: string
                  maxLength: 50
                  example: "Doe"
                phone:
                  type: string
                  pattern: '^[\+]?[1-9][\d]{0,15}$'
                  example: "+1234567890"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

  /users/change-password:
    put:
      tags:
        - User Management
      summary: Change user password
      description: Change current user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
                - confirmPassword
              properties:
                currentPassword:
                  type: string
                  example: "OldPassword123!"
                newPassword:
                  type: string
                  minLength: 8
                  example: "NewPassword123!"
                confirmPassword:
                  type: string
                  example: "NewPassword123!"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error or incorrect current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/dashboard:
    get:
      tags:
        - User Management
      summary: Get user dashboard
      description: Get user dashboard with statistics and recent activity
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      stats:
                        type: object
                        properties:
                          createdCourses:
                            type: integer
                            example: 5
                          courseStatusBreakdown:
                            type: array
                            items:
                              type: object
                              properties:
                                status:
                                  type: string
                                  example: "published"
                                count:
                                  type: integer
                                  example: 3
                          organizationCourses:
                            type: integer
                            example: 25
                      recentCreated:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
                      recentUpdated:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'

  /users/search:
    get:
      tags:
        - User Management
      summary: Search users
      description: Search users within the same organization
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
            maxLength: 100
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [admin, user]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: integer
                    example: 10
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                        example: 10
                      offset:
                        type: integer
                        example: 0
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Get specific user information within the same organization
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/account:
    delete:
      tags:
        - User Management
      summary: Deactivate account
      description: Deactivate current user's account
      responses:
        '200':
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Course Management Endpoints
  /courses:
    get:
      tags:
        - Course Management
      summary: Get all courses
      description: Get all courses accessible to the authenticated API key
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  count:
                    type: integer
                    example: 5
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"
                      brand:
                        type: string
                        example: "TechCorp Education"

    post:
      tags:
        - Course Management
      summary: Create a new course
      description: Create a new course (requires JWT authentication)
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 200
                  example: "Advanced Python Programming"
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "Learn advanced Python concepts and best practices"
                content:
                  type: string
                  minLength: 20
                  example: "This course covers advanced Python topics including decorators, generators, and async programming"
                brandId:
                  type: integer
                  example: 1
                status:
                  type: string
                  enum: [draft, published, archived]
                  default: draft
                  example: "draft"
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course created successfully"
                  data:
                    $ref: '#/components/schemas/Course'
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"
                      brand:
                        type: string
                        example: "TechCorp Education"

  /courses/search:
    get:
      tags:
        - Course Management
      summary: Search courses
      description: Search courses by title or description
      security:
        - ApiKeyAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
            maxLength: 100
            example: "python"
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by course status
          schema:
            type: string
            enum: [draft, published, archived]
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  count:
                    type: integer
                    example: 3
                  query:
                    type: string
                    example: "python"
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                        example: 10
                      offset:
                        type: integer
                        example: 0
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"
                      brand:
                        type: string
                        example: "TechCorp Education"

  /courses/status/{status}:
    get:
      tags:
        - Course Management
      summary: Get courses by status
      description: Get courses filtered by status
      security:
        - ApiKeyAuth: []
      parameters:
        - name: status
          in: path
          required: true
          description: Course status
          schema:
            type: string
            enum: [draft, published, archived]
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  count:
                    type: integer
                    example: 3
                  status:
                    type: string
                    example: "published"
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"
                      brand:
                        type: string
                        example: "TechCorp Education"

  /courses/{id}:
    get:
      tags:
        - Course Management
      summary: Get course by ID
      description: Get specific course by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      responses:
        '200':
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Course'
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"
                      brand:
                        type: string
                        example: "TechCorp Education"
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Course Management
      summary: Update course
      description: Update an existing course (requires JWT authentication)
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 200
                  example: "Advanced Python Programming"
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                  example: "Learn advanced Python concepts and best practices"
                content:
                  type: string
                  minLength: 20
                  example: "This course covers advanced Python topics including decorators, generators, and async programming"
                brandId:
                  type: integer
                  example: 1
                status:
                  type: string
                  enum: [draft, published, archived]
                  example: "published"
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course updated successfully"
                  data:
                    $ref: '#/components/schemas/Course'
                  context:
                    type: object
                    properties:
                      organization:
                        type: string
                        example: "TechCorp"
                      brand:
                        type: string
                        example: "TechCorp Education"

    delete:
      tags:
        - Course Management
      summary: Delete course
      description: Soft delete a course (requires JWT authentication)
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course deleted successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "Advanced Python Programming"
                      deletedAt:
                        type: string
                        format: date-time

  /courses/{id}/restore:
    patch:
      tags:
        - Course Management
      summary: Restore course
      description: Restore a soft-deleted course (requires JWT authentication)
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      responses:
        '200':
          description: Course restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Course restored successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "Advanced Python Programming"
                      restoredAt:
                        type: string
                        format: date-time

  # Organization Endpoints
  /org/info:
    get:
      tags:
        - Organization
      summary: Get organization info
      description: Get organization and brand information for the authenticated API key
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Organization info retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      organization:
                        $ref: '#/components/schemas/Organization'
                      brand:
                        $ref: '#/components/schemas/Brand'
                      accessLevel:
                        type: string
                        enum: [brand, organization]
                        example: "brand"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key in format "Bearer <api_key>"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phone:
          type: string
          example: "+1234567890"
        role:
          type: string
          enum: [admin, user]
          example: "user"
        organizationId:
          type: integer
          example: 1
        isActive:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        organization:
          $ref: '#/components/schemas/Organization'

    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Advanced Python Programming"
        description:
          type: string
          example: "Learn advanced Python concepts and best practices"
        content:
          type: string
          example: "This course covers advanced Python topics including decorators, generators, and async programming"
        status:
          type: string
          enum: [draft, published, archived]
          example: "published"
        organizationId:
          type: integer
          example: 1
        brandId:
          type: integer
          nullable: true
          example: 1
        createdBy:
          type: integer
          example: 1
        updatedBy:
          type: integer
          example: 1
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        organization:
          $ref: '#/components/schemas/Organization'
        brand:
          $ref: '#/components/schemas/Brand'

    Organization:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "TechCorp"
        description:
          type: string
          example: "Technology education company"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Brand:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "TechCorp Education"
        description:
          type: string
          example: "Educational courses for students"
        organizationId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              type: object
              properties:
                accessToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                expiresIn:
                  type: string
                  example: "7d"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email must be a valid email address"

tags:
  - name: Authentication
    description: User authentication and registration
  - name: User Management
    description: User profile and account management
  - name: Course Management
    description: Course CRUD operations and management
  - name: Organization
    description: Organization and brand information
